## node chunkify

### 关于chunk [[https://github.com/thunks/thunks#what-is-a-thunk][Link]]
- *thunk* is a function that encapsulates synchronous or asynchronous code inside.
  /被封装的同步或异步方法/

- *thunk* accepts only one callback function as an arguments, which is a CPS function.
  /只接受一个callbakc方法作为参数/

- *thunk* returns another thunk function after being called, for chaining operations.
  /返回chunk function，支持链式调用/

- *thunk* passes the results into a callback function after being excuted.
   If the return value of callback is a thunk function,
   then it will be executed first and its result will be sent to another thunk for excution,
   or it will be sent to another new thunk function as the value of the computation.


### node-thunkify code
  #+BEGIN_SRC js
  var assert = require('assert');

  module.exports = thunkify;

  /**
  * Wrap a regular callback `fn` as a thunk.
  *
  * @param {Function} fn
  * @return {Function}
  * @api public
  */

  function thunkify(fn){
    assert('function' == typeof fn, 'function required');

    return function(){
      var args = new Array(arguments.length);
      var ctx = this;

      for(var i = 0; i < args.length; ++i) {
        args[i] = arguments[i];
      }

      return function(done){
        var called;

        args.push(function(){
          if (called) return;
          called = true;
          done.apply(null, arguments);
        });

        try {
          fn.apply(ctx, args);
        } catch (err) {
          done(err);
        }
      }
    }
  };
  #+END_SRC

  #+BEGIN_SRC js
  /* without chunk */
  var fs = require('fs');
  var read = fs.readFile;
  read('package.json', 'utf8', function(err, str) {

  })
  #+END_SRC
  
  #+BEGIN_SRC  js
  /* use with chunk */
  var thunkify = require('thunkify');
  var fs = require('fs');

  var read = thunkify(fs.readFile);

  read('package.json', 'utf8')(function(err, str){

  });
  #+END_SRC

